<?php

namespace Mermaid;

/**
 * @license GNU GPL v2+
 * @since 2.4.0
 *
 * @author howlowck
 */
class MermaidConfigExtractor {
	// TODO: This should eventually be autogenerated by programmatically inspecting the config json set by mermaid.js
	private $configMap = [
		// global
		'theme' => null,
		'themeCSS' => null,
		'fontFamily' => null,
		'logLevel' => null,
		'securityLevel' => null,
		'startOnLoad' => FILTER_VALIDATE_BOOLEAN,
		'arrowMarkerAbsolute' => FILTER_VALIDATE_BOOLEAN,
		'secure' => null,
		'legacyMathML' => FILTER_VALIDATE_BOOLEAN,
		'forceLegacyMathML' => FILTER_VALIDATE_BOOLEAN,
		'deterministicIds' => FILTER_VALIDATE_BOOLEAN,
		'deterministicIDSeed' => null,

		// flowchart
		'flowchart.curve' => null,
		'flowchart.defaultRenderer' => null,
		'flowchart.useMaxWidth' => FILTER_VALIDATE_BOOLEAN,
		'flowchart.htmlLabels' => FILTER_VALIDATE_BOOLEAN,
		'flowchart.nodeSpacing' => null,
		'flowchart.rankSpacing' => null,
		'flowchart.minLen' => null,
		'flowchart.padding' => null,
		'flowchart.defaultLevelSeparation' => null,
		'flowchart.defaultRankSeparation' => null,
		'flowchart.defaultNodeSeparation' => null,
		'flowchart.wrap' => FILTER_VALIDATE_BOOLEAN,

		// sequence
		'sequence.diagramMarginX' => null,
		'sequence.diagramMarginY' => null,
		'sequence.actorMargin' => null,
		'sequence.width' => null,
		'sequence.height' => null,
		'sequence.boxMargin' => null,
		'sequence.boxTextMargin' => null,
		'sequence.noteMargin' => null,
		'sequence.messageMargin' => null,
		'sequence.messageAlign' => null,
		'sequence.mirrorActors' => FILTER_VALIDATE_BOOLEAN,
		'sequence.bottomMarginAdj' => null,
		'sequence.useMaxWidth' => FILTER_VALIDATE_BOOLEAN,
		'sequence.rightAngles' => FILTER_VALIDATE_BOOLEAN,
		'sequence.showSequenceNumbers' => FILTER_VALIDATE_BOOLEAN,
		'sequence.actorFontSize' => null,
		'sequence.messageFontSize' => null,

		// gantt
		'gantt.titleTopMargin' => null,
		'gantt.barHeight' => null,
		'gantt.barGap' => null,
		'gantt.topPadding' => null,
		'gantt.leftPadding' => null,
		'gantt.gridLineStartPadding' => null,
		'gantt.fontSize' => null,
		'gantt.fontFamily' => null,
		'gantt.numberSectionStyles' => null,
		'gantt.axisFormat' => null,
		'gantt.displayMode' => null,
		'gantt.useMaxWidth' => FILTER_VALIDATE_BOOLEAN,

		// journey
		'journey.useMaxWidth' => FILTER_VALIDATE_BOOLEAN,
		'journey.fontSize' => null,
		'journey.rightMargin' => null,

		// pie
		'pie.useMaxWidth' => FILTER_VALIDATE_BOOLEAN,
		'pie.titleFontSize' => null,

		// state
		'state.useMaxWidth' => FILTER_VALIDATE_BOOLEAN,

		// timeline
		'timeline.useMaxWidth' => FILTER_VALIDATE_BOOLEAN,
		'timeline.axisFormatter' => null,

		// class diagram
		'class.useMaxWidth' => FILTER_VALIDATE_BOOLEAN,

		// er diagram
		'er.useMaxWidth' => FILTER_VALIDATE_BOOLEAN,
	];

	/**
	 * Extracts the param array into a tuple of two arrays
	 * @param array $params
	 * @return array [$mermaidConfig, $mediawikiParam]
	 */
	public function extract( array $params ) {
		$configMapKeys = array_keys( $this->configMap );

		// Use reduce to split the param array into two arrays: [$mermaidConfig, $mediawikiParam]
		return array_reduce( $params, function ( $prev, $current ) use ( $configMapKeys ) {
			// De-structures the two arrays
			list( $mermaidConfig, $mwParams ) = $prev;

			// if there is no "=", it belongs in mediawiki params
			if ( strpos( $current, '=' ) === false ) {
				$mwParams[] = $current;
				return [ $mermaidConfig, $mwParams ];
			}

			// split from the first "=" into two parts, then trim both parts
			list( $key, $value ) = array_map( 'trim', explode( '=', $current, 2 ) );

			// test to see if the leftside of the "=" is in the configMap keys
			$normalizedKey = $this->keyNamingNormalizer( $key );
			$inConfigMap = in_array( $normalizedKey, $configMapKeys, true );

			// if not in config map, the value belongs in the mediawiki params
			if ( !$inConfigMap ) {
				$mwParams[] = $current;
				return [ $mermaidConfig, $mwParams ];
			}

			// config key is in the config map
			// check to see if there is a type associated with the key
			$normalizedValue = $value;
			$valueType = $this->configMap[$normalizedKey];
			if ( $valueType !== null ) {
				// normalize: 'true' => true, '1' => true, etc
				$normalizedValue = filter_var( $value, $valueType, FILTER_NULL_ON_FAILURE );
			}

			// set the config with dot.notation
			$this->setWithDotNotation( $mermaidConfig, $normalizedKey, $normalizedValue );
			return [ $mermaidConfig, $mwParams ];
		}, [ [], [] ] );
	}

	/**
	 * Removes "config." from the dot-notationed configuration key
	 * @param string $key
	 * @return false|string
	 */
	protected function keyNamingNormalizer( string $key ) {
		if ( strpos( $key, 'config.' ) === false ) {
			return $key;
		}
		return substr( $key, 7 );
	}

	// Taken from Laravel's Arr::set function
	// https://github.com/laravel/framework/blob/7.x/src/Illuminate/Support/Arr.php
	/**
	 * Sets a value onto an array with keys using dot.notation, in-place
	 * @param &$array
	 * @param $key
	 * @param $value
	 * @return array|mixed
	 */
	protected function setWithDotNotation( &$array, $key, $value ) {
		if ( is_null( $key ) ) {
			return $array = $value;
		}

		$keys = explode( '.', $key );

		foreach ( $keys as $i => $key ) {
			if ( count( $keys ) === 1 ) {
				break;
			}

			unset( $keys[$i] );

			// If the key doesn't exist at this depth, we will just create an empty array
			// to hold the next value, allowing us to create the arrays to hold final
			// values at the correct depth. Then we'll keep digging into the array.
			if ( !isset( $array[$key] ) || !is_array( $array[$key] ) ) {
				$array[$key] = [];
			}

			$array = &$array[$key];
		}

		$array[array_shift( $keys )] = $value;

		return $array;
	}
}
